# NOTE: https://docs.github.com/ja/actions/using-workflows/reusing-workflows
name: Python code check workflow

on:
  workflow_call:
    inputs:
      python-version:
        description: "python version"
        type: string
      pip-version:
        description: "pip version"
        type: string
      poetry-version:
        description: "poetry version"
        type: string
        default: "latest"
      working-directory:
        description: "workdir"
        type: string
        default: "."
      command-check-format:
        description: "format check command"
        type: string
        required: true
      command-lint:
        description: "lint command"
        type: string
        required: true
      command-test:
        description: "test command"
        type: string
        required: true

jobs:
  check-code:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      # check-out repo & set-up python
      #----------------------------------------------
      - name: Check out repository
        id: check-out-repository
        uses: actions/checkout@v3

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      #----------------------------------------------
      # install & configure poetry
      #----------------------------------------------
      - name: Install Poetry
        id: install-poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      # load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: ${{ inputs.working-directory }}/.venv
          key: venv-${{ runner.os }}-${{ inputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        id: install-dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: ${{ inputs.working-directory }}
        run: poetry install --no-interaction --no-root

      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        id: install-library
        working-directory: ${{ inputs.working-directory }}
        run: poetry install --no-interaction

      #----------------------------------------------
      # run test suite
      #----------------------------------------------
      - name: Check format
        id: check-format
        working-directory: ${{ inputs.working-directory }}
        run: ${{ inputs.command-check-format }}

      - name: Lint
        id: lint
        working-directory: ${{ inputs.working-directory }}
        run: ${{ inputs.command-lint }}

      - name: Test
        id: test
        working-directory: ${{ inputs.working-directory }}
        run: ${{ inputs.command-test }}
