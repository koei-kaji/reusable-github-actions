# NOTE: https://docs.github.com/ja/actions/using-workflows/reusing-workflows
name: Docker check workflow

on:
  workflow_call:
    inputs:
      working-directory:
        description: "workdir"
        type: string
        default: "."
      docker-tag:
        description: "docker tag"
        type: string
        default: "docker-image:github-actions"
      dockerfile-name:
        description: "dockerfile name"
        type: string
        default: "Dockerfile"
      trivy-exit-code:
        description: "Exit code when specified vulnerabilities are found"
        type: string
        default: 1

jobs:
  check-docker:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      # check-out repo & set-up python
      #----------------------------------------------
      - name: Check out repository
        id: check-out-repository
        uses: actions/checkout@v3

      #----------------------------------------------
      # lint dockerfile
      #----------------------------------------------
      # NOTE: https://github.com/marketplace/actions/hadolint-action
      - name: Lint dockerfile
        id: lint-dockerfile
        uses: hadolint/hadolint-action@v2.0.0
        env:
          DOCKER_CONTENT_TRUST: 0
        with:
          dockerfile: ${{ inputs.working-directory }}/${{ inputs.dockerfile-name }}

      #----------------------------------------------
      # build docker
      #----------------------------------------------
      - name: Build docker
        id: build-docker
        working-directory: ${{ inputs.working-directory }}
        run: docker build --no-cache -t ${{ inputs.docker-tag }} -f ${{ inputs.dockerfile-name }} .

      #----------------------------------------------
      # scan with dockle
      #----------------------------------------------
      - name: Run dockle
        id: run-dockle
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            goodwithtech/dockle:latest --no-color ${{ inputs.docker-tag }}

      #----------------------------------------------
      # scan with trivy
      # 1. run trivy
      # 2. set output trivy results
      #    https://github.com/marketplace/actions/create-or-update-comment#setting-the-comment-body-from-a-file
      # 3. comment if trivy step was failure
      # 4. exit ${{ inputs.trivy-exit-code }} if trivy step was failure
      #----------------------------------------------
      - name: Run Trivy vulnerability scanner
        id: run-trivy-vulnerability-scanner
        uses: aquasecurity/trivy-action@0.5.1
        with:
          image-ref: ${{ inputs.docker-tag }}
          format: "table"
          exit-code: 1
          ignore-unfixed: true
          output: "trivy-results.txt"
        continue-on-error: true

      - name: Set output trivy results
        id: set-toutput-trivy-results
        if: ${{ steps.run-trivy-vulnerability-scanner.outcome == 'failure' }}
        run: |
          body="$(cat comment-body.txt)"
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}" 
          echo "::set-output name=body::$body"

      - name: Comment if trivy step was failure
        id: comment-if-trivy-step-was-failure
        if: ${{ steps.run-trivy-vulnerability-scanner.outcome == 'failure' && github.event_name == 'pull_request' }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          body: ${{ steps.set-toutput-trivy-results.outputs.body }}
          issue-number: ${{ github.event.pull_request.number }}

      - name: Exit ${{ inputs.trivy-exit-code }} if trivy step was failure
        id: exit-if-trivy-step-was-failure
        if: ${{ steps.run-trivy-vulnerability-scanner.outcome == 'failure' }}
        run: exit ${{ inputs.trivy-exit-code }}
