# NOTE: https://docs.github.com/ja/actions/using-workflows/reusing-workflows
name: Terraform with google cloud workflow

on:
  workflow_call:
    secrets:
      workload-identity-provider:
        description: "https://github.com/google-github-actions/auth/blob/95a6bc2a27ae409a01ea58dd0732eccaa088ec07/action.yml#L30-L34"
        required: true
      service-account:
        description: "https://github.com/google-github-actions/auth/blob/95a6bc2a27ae409a01ea58dd0732eccaa088ec07/action.yml#L38-L40"
        required: true
      backend-gcs:
        description: "backend gcs bucket name"
        required: true
      tf-vars:
        description: "terraform vars"
        required: true
    inputs:
      environment-directory:
        description: "environment directory path"
        type: string
        default: "."
      terraform-version:
        description: "terraform version"
        type: string
        required: true
      comamnd-check-format:
        description: "format check command"
        type: string
        default: "terraform fmt -recursive -check"
      command-lint:
        description: "lint command"
        type: string
        default: "terraform validate"
      do-plan:
        description: "whether to execute plan command"
        type: boolean
        default: true
      do-apply:
        description: "whether to execute apply command"
        type: boolean
        default: false
      continue-on-error-plan:
        description: "whether to continue on error when running plan step"
        type: boolean
        default: false
      continue-on-error-apply:
        description: "whether to continue on error when running apply step"
        type: boolean
        default: false
    outputs:
      check-format-outcome:
        description: "outcome of check format step"
        value: ${{ jobs.terraform.outputs.check-format-outcome }}
      lint-outcome:
        description: "outcome of lint step"
        value: ${{ jobs.terraform.outputs.lint-outcome }}
      init-outcome:
        description: "outcome of init step"
        value: ${{ jobs.terraform.outputs.init-outcome }}
      plan-outcome:
        description: "outcome of plan step"
        value: ${{ jobs.terraform.outputs.plan-outcome }}
      plan-stdout:
        description: "stdout of plan step"
        value: ${{ jobs.terraform.outputs.plan-stdout }}
      apply-outcome:
        description: "outcome of apply step"
        value: ${{ jobs.terraform.outputs.apply-outcome }}
      apply-stdout:
        description: "stdout of apply step"
        value: ${{ jobs.terraform.outputs.apply-stdout }}
      apply-stderr:
        description: "stderr of apply step"
        value: ${{ jobs.terraform.outputs.apply-stderr }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    # Add "id-token" with the intended permissions.
    permissions:
      contents: "read"
      id-token: "write"
    outputs:
      check-format-outcome: ${{ steps.check-format.outcome }}
      lint-outcome: ${{ steps.lint.outcome }}
      init-outcome: ${{ steps.init.outcome }}
      plan-outcome: ${{ steps.plan.outcome }}
      plan-stdout: ${{ steps.plan.outputs.stdout }}
      apply-outcome: ${{ steps.apply.outcome }}
      apply-stdout: ${{ steps.apply.outputs.stdout }}
      apply-stderr: ${{ steps.apply.outputs.stderr }}
    steps:
      #----------------------------------------------
      # check-out repo
      #----------------------------------------------
      - name: Check out repository
        id: check-out-repository
        uses: actions/checkout@v3

      #----------------------------------------------
      # authenticate to google cloud & set env
      #----------------------------------------------
      - name: Authenticate to Google Cloud
        id: authenticate-to-google-cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.workload-identity-provider }}
          service_account: ${{ secrets.service-account }}

      - name: Set environment for terraform
        id: set-environment-for-terraform
        run: |
          echo "GOOGLE_CREDENTIALS=${{ steps.authenticate-to-google-cloud.credentials_file_path }}" >> $GITHUB_ENV
          echo "${{ secrets.tf-vars }}" >> $GITHUB_ENV

      #----------------------------------------------
      # setup terraform
      #----------------------------------------------
      - name: Setup Terraform
        id: setup-terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}

      #----------------------------------------------
      # run test suite
      #----------------------------------------------
      - name: Check format
        id: check-format
        run: ${{ inputs.command-check-format }}

      - name: lint
        id: lint
        run: ${{ inputs.command-lint}}

      #----------------------------------------------
      # init terraform
      #----------------------------------------------
      - name: Init
        id: init
        working-directory: ${{ inputs.environment-directory }}
        run: "terraform init -backend-config='bucket=${{secrets.backend-gcs}}'"

      #----------------------------------------------
      # plan
      #----------------------------------------------
      - name: Plan
        id: plan
        if: ${{ inputs.do-plan }}
        working-directory: ${{ inputs.environment-directory }}
        run: "terraform plan -no-color"
        continue-on-error: ${{ inputs.continue-on-error-plan }}

      #----------------------------------------------
      # apply
      #----------------------------------------------
      - name: Apply
        id: apply
        if: ${{ inputs.do-apply && steps.plan.outcome == 'success' }}
        working-directory: ${{ inputs.environment-directory }}
        run: "terraform apply -auto-approve -no-color"
        continue-on-error: ${{ inputs.continue-on-error-apply }}
