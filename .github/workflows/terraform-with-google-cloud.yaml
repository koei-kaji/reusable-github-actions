# NOTE: https://docs.github.com/ja/actions/using-workflows/reusing-workflows
name: Terraform with google cloud workflow

on:
  workflow_call:
    secrets:
      workload-identity-provider:
        description: "https://github.com/google-github-actions/auth/blob/95a6bc2a27ae409a01ea58dd0732eccaa088ec07/action.yml#L30-L34"
        required: true
      service-account:
        description: "https://github.com/google-github-actions/auth/blob/95a6bc2a27ae409a01ea58dd0732eccaa088ec07/action.yml#L38-L40"
        required: true
      backend-gcs:
        description: "backend gcs bucket name"
        required: true
      tf-vars:
        description: "terraform vars"
        required: true
    inputs:
      environment-directory:
        description: "environment directory path"
        type: string
        default: "."
      terraform-version:
        description: "terraform version"
        type: string
        required: true
      comamnd-check-format:
        description: "format check command"
        type: string
        default: "terraform fmt -recursive -check"
      command-lint:
        description: "lint command"
        type: string
        default: "terraform validate"
      do-plan:
        description: "whether to execute plan command"
        type: boolean
        default: true
      do-apply:
        description: "whether to execute apply command"
        type: boolean
        default: false
      do-update-pull-request:
        description: "whether to update when pull request"
        type: boolean
        default: false

jobs:
  terraform:
    runs-on: ubuntu-latest
    # Add "id-token" with the intended permissions.
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      #----------------------------------------------
      # check-out repo
      #----------------------------------------------
      - name: Check out repository
        id: check-out-repository
        uses: actions/checkout@v3

      #----------------------------------------------
      # authenticate to google cloud & set env
      #----------------------------------------------
      - name: Authenticate to Google Cloud
        id: authenticate-to-google-cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.workload-identity-provider }}
          service_account: ${{ secrets.service-account }}

      - name: Set environment for terraform
        id: set-environment-for-terraform
        run: |
          echo "GOOGLE_CREDENTIALS=${{ steps.authenticate-to-google-cloud.credentials_file_path }}" >> $GITHUB_ENV
          echo "${{ secrets.tf-vars }}" >> $GITHUB_ENV

      #----------------------------------------------
      # setup terraform
      #----------------------------------------------
      - name: Setup Terraform
        id: setup-terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}

      #----------------------------------------------
      # run test suite
      #----------------------------------------------
      - name: Check format
        id: check-format
        run: ${{ inputs.command-check-format }}

      - name: lint
        id: lint
        run: ${{ inputs.command-lint}}

      #----------------------------------------------
      # init terraform
      #----------------------------------------------
      - name: Init
        id: init
        working-directory: ${{ inputs.environment-directory }}
        run: "terraform init -backend-config='bucket=${{secrets.backend-gcs}}'"

      #----------------------------------------------
      # plan
      #----------------------------------------------
      - name: Plan
        id: plan
        if: ${{ inputs.do-plan }}
        working-directory: ${{ inputs.environment-directory }}
        run: "terraform plan"
        continue-on-error: true

      #----------------------------------------------
      # apply
      #----------------------------------------------
      - name: Apply
        id: apply
        if: ${{ inputs.do-apply && steps.plan.outcome == 'success' }}
        working-directory: ${{ inputs.environment-directory }}
        run: "terraform apply -auto-approve"
        continue-on-error: true

      #----------------------------------------------
      # update pull request
      #----------------------------------------------
      # https://github.com/marketplace/actions/github-script
      - name: Update Pull Request
        id: update-pull-request
        if: ${{ inputs.do-update-pull-request && github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let plan = `terraform\n${{ steps.plan.outputs.stdout }}`;
            let apply = `terraform\n${{ steps.apply.outputs.stdout }}`;

            const output = `
            #### Terraform Format and Style üñå\`${{ steps.check-format.outcome }}\`
            #### Terraform Lint ü§ñ\`${{ steps.lint.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Apply üöÄ\`${{ steps.apply.outcome }}\`



            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${plan}
            \`\`\`

            </details>

            <details><summary>Show Apply</summary>

            \`\`\`\n
            ${apply}
            \`\`\`

            </details>


            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      #----------------------------------------------
      # exit 1 if plan/apply is error
      #----------------------------------------------
      - name: Status
        id: status
        if: ${{ steps.plan.outcome == 'failure' || steps.apply.outcome == 'failure' }}
        run: exit 1
